---
- name: Updating packages
  apt:
    update_cache: yes
    upgrade: yes

- name: Checking kernel version for Linux headers
  command: uname -r
  register: version

- debug:
    msg: "Kernel version is {{ version.stdout }}"

- name: Downloading packages for Hashcat...
  apt:
    name: "{{ packages }}"
  vars:
    packages:
    - build-essential
    - "linux-headers-{{ version.stdout }}"
    - linux-image-extra-virtual
    - screen

- name: Blacklisting kernel modules
  block:
    - copy:
        src: files/blacklist-nouveau.conf
        dest: /etc/modprobe.d/
        owner: root
        group: root
        mode: 0666
    - copy:
        src: files/nouveau-kms.conf
        dest: /etc/modprobe.d/
        owner: root
        group: root
        mode: 0666

- name: Updating initramfs
  command: "update-initramfs -u"

- name: Checking if reboot is needed...
  command: cat /root/state.txt
  register: bootstate
  ignore_errors: true

- reboot:
  when: '"rebooted" not in bootstate.stdout'

- debug:
    msg: "Server already booted, skipping reboot"
  when: '"rebooted" in bootstate.stdout'

####
#### Post-reboot: Setting up Hashcat
####
- name: Reboot successful. Updating info.
  when: '"rebooted" not in bootstate.stdout'
  lineinfile:
    create: yes
    path: /root/state.txt
    state: present
    insertafter: EOF
    line: "rebooted"

- name: Mounting wordlist volumes.
  block:
    - file:
        path: /newvolume
        state: directory
        mode: '0666'
    - mount:
        path: /newvolume/
        src: "{{hostvars['localhost']['wordvol']}}"
        fstype: ext4
        state: mounted

- name: Downloading Hashcat and NVIDIA drivers
  block:
    - name: NVIDIA drivers
      get_url:
        url: http://us.download.nvidia.com/tesla/410.104/NVIDIA-Linux-x86_64-410.104.run
        dest: /opt/
        mode: '0555'
    - name: Hashcat
      get_url:
        url: https://hashcat.net/files/hashcat-5.1.0.tar.gz
        dest: /opt/
        mode: '0666'

- name: Checking if NVIDIA drivers need to be installed
  command: cat /root/state.txt
  register: nvidiastate

- name: Installing NVIDIA drivers
  command: "/bin/bash NVIDIA-Linux-x86_64-410.104.run --ui=none --no-questions --silent -X"
  args:
    chdir: /opt/
  when: '"nvidia-installed" not in nvidiastate.stdout'

- name: NVIDIA driver install successful. Updating info.
  when: '"nvidia-installed" not in nvidiastate.stdout'
  lineinfile:
    create: yes
    path: /root/state.txt
    state: present
    insertafter: EOF
    line: "nvidia-installed"

- debug:
    msg: "NVIDIA drivers already installed, skipping..."
  when: '"nvidia-installed" in nvidiastate.stdout'

- name: Extracting Hashcat to /opt/ directory
  unarchive:
    remote_src: yes
    src: /opt/hashcat-5.1.0.tar.gz
    dest: /opt/

- name: Compiling Hashcat
  command: make
  args:
    chdir: /opt/hashcat-5.1.0

- name: Copying hashes for cracking
  block:
    - file:
        path: /opt/hashes/
        state: directory
        mode: '0755'
    - copy:
        src: files/hashes.txt
        dest: /opt/hashes/
        owner: root
        group: root
        mode: 0666

####
#### Hashcat exection statements
####

- name: Executing a short hashcat run against hashfile
  command: "{{ shortcrack }}"
  args:
    chdir: /opt/hashcat-5.1.0

- name: Executing a medium hashcat run against hashfile
  when: medium is defined
  command: "{{ mediumcrack }}"
  args:
    chdir: /opt/hashcat-5.1.0

- name: Executing a long hashcat run against hashfile
  when: long is defined
  command: "{{ longcrack }}"
  args:
    chdir: /opt/hashcat-5.1.0

####
#### End of Hashcat execution statements
####

- debug:
    msg: "Medium or long hash cracking mode has been chosen, access the server to check on cracking progress with: ssh -i ~/.ssh/your-key-here ubuntu@{{hostvars['localhost']['serverip']}}"
  when: long is defined or
        medium is defined

- name: Cracking complete, reading outfile
  command: "cat /opt/hashcat-5.1.0/cracked.txt"
  register: cracked

- debug:
    msg: "The following hashes were recovered {{ cracked.stdout }}"
  when: short is defined

- debug:
    msg: "Remote execution complete! Returning to local execution..."
